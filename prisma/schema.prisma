// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isActive      Boolean?
  roles_id      Int?
  company_id    Int?
  store_id      Int?    
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  M1001_Roles   M1001_Roles?     @relation(fields: [roles_id], references: [id])
  M001_Company  M001_Company?    @relation(fields: [company_id], references: [id])
  M003_Store    M003_Store?      @relation(fields: [store_id], references: [id])

}

model Account {
  id                Int         @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?     @default("")
  access_token      String?     @default("")
  oauth_token       String?
  oauth_token_secret String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  @@unique([provider, providerAccountId])
}

model Session {
  id           Int            @id @default(autoincrement())
  sessionToken String         @unique
  userId       Int
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model M1001_Roles {
  id              Int          @id @default(autoincrement())   
  roles_name      String
  createdAt       DateTime     @default(now())
  updateAt        DateTime     @updatedAt
  user            User[]

}

model M001_Company {
  id                Int       @id @default(autoincrement())
  company_name      String
  company_owner     String
  business_typeID   Int       @unique
  owner_id          Int       @unique
  operational_time  String?
  province_code     String
  city_code         String
  district_code     String
  isActive          Boolean
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  M002_businessType M002_BusinessType @relation(fields: [business_typeID], references: [id])
  users             User[]

}

model M002_BusinessType {
  id              Int     @id @default(autoincrement())
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  M001_Company    M001_Company?   
}


model M003_Store {
  id            Int     @id @default(autoincrement())
  company_id    Int     @unique
  store_name    String
  address       String?
  phone         String? 
  bank_type     Int?  
  bank_tf       String
  logo_small    String?
  logo_big      String?
  footer_faktur String?
  isActive      Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User[]

  M2001_ProductCategories M2001_ProductCategories[]
  M2002_Product  M2002_Product[]
}

model M1002_DataBank {
  id      Int     @id @default(autoincrement())
  name    String
  type    String
  code    String  @db.VarChar(3)
  address String?
  phone   String? @db.VarChar(41)
  fax     String? @db.VarChar(51)
  website String?
}

model M2001_ProductCategories {
  id        Int       @id @default(autoincrement())
  code      String    
  name      String
  store_id  Int
  isActive  Boolean?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy Int?   
  updatedBy Int?  

  M003_Store M003_Store? @relation(fields: [store_id], references: [id])
  M2002_Product M2002_Product[]
}

model M2002_Product{
  id            Int       @id @default(autoincrement())
  store_id      Int
  category_id   Int
  productCode   String
  productName   String
  description   String?
  isActive      Boolean?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy Int?   
  updatedBy Int?

  M003_Store              M003_Store? @relation(fields: [store_id], references: [id])
  M2001_ProductCategories M2001_ProductCategories? @relation(fields: [category_id], references: [id])
  M2003_ProductPrice      M2003_ProductPrice[]
  M2004_ProductVariant    M2004_ProductVariant[]
  M2005_ProductImage      M2005_ProductImage[]
}


model M2003_ProductPrice{
  id            Int       @id @default(autoincrement())
  product_id    Int   
  qty1          Int
  qty2          Int
  unitPrice     Decimal
  notes         String?
  isActive      Boolean?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     Int?   
  updatedBy     Int?

  M2002_Product M2002_Product? @relation(fields: [product_id], references: [id])
}


model M2004_ProductVariant{
  id            Int       @id @default(autoincrement())
  product_id    Int  
  variantName   String    
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     Int?   
  updatedBy     Int?

  M2002_Product M2002_Product? @relation(fields: [product_id], references: [id])
}

model M2005_ProductImage{
  id            Int       @id @default(autoincrement())
  product_id    Int
  categoryImg   String
  image_url     String

  
  M2002_Product M2002_Product? @relation(fields: [product_id], references: [id])
}






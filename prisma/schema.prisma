// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(uuid())
  name                  String?
  email                 String            @unique
  emailVerified         DateTime?
  phoneNumber           String?
  image                 String?
  password              String?
  isActive              Boolean?
  rolesId               String?
  companyId             String?
  storeId               String?    
  accounts              Account[]
  sessions              Session[]
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  M1001_Roles           M1001_Roles?      @relation(fields: [rolesId], references: [id])
  M001_Company          M001_Company?     @relation(fields: [companyId], references: [id])
  M003_Store            M003_Store?       @relation(fields: [storeId], references: [id])

}

model Account {
  id                    String         @id @default(uuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?     @default("")
  access_token          String?     @default("")
  oauth_token           String?
  oauth_token_secret    String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  @@unique([provider, providerAccountId])
}

model Session {
  id                    Int            @id @default(autoincrement())
  sessionToken          String         @unique
  userId                String
  expires               DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model M1001_Roles {
  id                    String       @id @default(uuid())   
  rolesName            String
  createdAt             DateTime     @default(now())
  updateAt              DateTime     @updatedAt
  user                  User[]

}

model M001_Company {
  id                    String        @id @default(uuid())
  companyName           String
  companyOwner          String
  businessTypeId        Int           
  ownerId               String?       @unique
  operationalTime       String?
  provinceId            String
  cityId                String
  districtId            String
  isActive              Boolean
  createdAt             DateTime      @default(now())
  createdBy             String?
  updatedAt             DateTime      @updatedAt
  updatedBy             String?
  M002_businessType     M002_BusinessType[]
  users                 User[]

}

model M002_BusinessType {
  id                    Int           @id @default(autoincrement())
  name                  String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  M001_Company          M001_Company[]   
}


model M003_Store {
  id                    String      @id @default(uuid())
  companyId             String      @unique
  storeName             String
  address               String?
  phone                 String? 
  bankType              Int?  
  bankTf                String
  logoSmall             String?
  logoBig               String?
  footerFaktur          String?
  isActive              Boolean
  createdAt             DateTime  @default(now())
  createdBy             String?
  updatedAt             DateTime  @updatedAt
  updatedBy             String?
  user                  User[]

  M2001_ProductCategories M2001_ProductCategories[]
  M2002_Product  M2002_Product[]
}

model M1002_DataBank {
  id                    Int     @id @default(autoincrement())
  name                  String
  type                  String
  code                  String  @db.VarChar(3)
  address               String?
  phone                 String? @db.VarChar(41)
  fax                   String? @db.VarChar(51)
  website               String?
}

model M2001_ProductCategories {
  id                    String    @id @default(cuid())
  code                  String    
  name                  String
  storeId               String
  isActive              Boolean?
  createdAt             DateTime  @default(now())
  createdBy             String?   
  updatedAt             DateTime  @updatedAt
  updatedBy             String?  

  M003_Store M003_Store? @relation(fields: [storeId], references: [id])
  M2002_Product M2002_Product[]
}

model M2002_Product{
  id                    String       @id @default(cuid())
  storeId               String
  categoryId            String
  productCode           String
  productName           String
  description           String?
  isActive              Boolean?
  createdAt             DateTime  @default(now())
  createdBy             String?   
  updatedAt             DateTime  @updatedAt
  updatedBy             String?

  M003_Store              M003_Store? @relation(fields: [storeId], references: [id])
  M2001_ProductCategories M2001_ProductCategories? @relation(fields: [categoryId], references: [id])
  M2003_ProductPrice      M2003_ProductPrice[]
  M2004_ProductVariant    M2004_ProductVariant[]
  M2005_ProductImage      M2005_ProductImage[]
}


model M2003_ProductPrice{
  id                    String       @id @default(cuid())
  productId             String   
  qty1                  Int
  qty2                  Int
  unitPrice             Decimal
  notes                 String?
  isActive              Boolean?
  createdAt             DateTime  @default(now())
  createdBy             String?   
  updatedAt             DateTime  @updatedAt
  updatedBy             String?

  M2002_Product M2002_Product? @relation(fields: [productId], references: [id])
}


model M2004_ProductVariant{
  id                    String       @id @default(cuid())
  productId             String  
  variantName           String    
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdBy             String?   
  updatedBy             String?

  M2002_Product M2002_Product? @relation(fields: [productId], references: [id])
}

model M2005_ProductImage{
  id                    String       @id @default(cuid())
  productId             String
  categoryImg           String
  image_url             String

  
  M2002_Product M2002_Product? @relation(fields: [productId], references: [id])
}





